# Requirements

`pyANI-plus` relies on several other programs, packages, and tools for both running and development. While many of these dependencies are installed automatically during setup, some may need to be downloaded and installed separately. This page provides a list of all required dependencies, along with explanations of their roles and why they are used.

## Python3
`pyANI-plus` is designed to run on [Python3](https://www.python.org/), taking advantage of its latest features and improvements. It is not compatible with Python2, so using Python3 is required for installation and development.

## NCBI-BLAST+
ANIb analysis, which calculates Average Nucleotide Identity using [BLAST](https://blast.ncbi.nlm.nih.gov/doc/blast-help/downloadblastdata.html#downloadblastdata), involves comparing genome sequences through the BLAST tool provided by NCBI. 


## MUMer
For ANIm (Average Nucleotide Identity using MUMmer) analysis, genome sequences are compared using the nucmer tool from the [MUMmer](https://mummer.sourceforge.net/) package. The same tool is applied in the dnadiff command to compare and analyze genome sequences. The key difference between the two methods lies in how the intermediate alignments are generated. `dnadiff` uses the `--maxmatch` (all anchor matches regardless of their uniqueness) parameter and `-m` (many-to-many) alignments to replicate the results reported by the `dnadiff` wrapper. In contrast, ANIm uses the `--mum` (anchor matches that are unique in both the reference and query) parameter by default, with the possibility of using the --maxmatch and -1 parameters in the delta.filter wrapper to generate 1-to-1 alignments.

## sourmash
For sourmash (Average Nucletide Identity using sourmash) analysis, genome sequences are compared using the [sourmash](https://sourmash.readthedocs.io/en/latest/) tool. 


## fastANI
For fastANI (Average Nucletide Identity using FastANI) analysis, genome sequences are compared using the [fastANI](https://github.com/ParBLiSS/FastANI) tool. 

## SQLite3
The output generated by pyani analyses is stored in a local database, provided by SQLite3, for rapid querying and recovery. This allows for persistent storage of results without the need to keep the original alignment files, and for incremental addition of new analyses. SQLite is installed with Python

## snakemake
By integrating [snakemake](https://snakemake.readthedocs.io/en/stable/), we maintain a single interface for defining and managing workflows. This allows us to standardize job execution across different environments without needing separate scheduling logic for local, cluster, or cloud execution.

## Python Packages
`pyANI-plus` depends on several other Python packages, and we gratefully acknowledge their contribution:

- [Matplotlib](https://matplotlib.org/): for graphical output
- [intervaltree](https://github.com/chaimleib/intervaltree): for identification of overlaps
- [Seaborn](https://seaborn.pydata.org/index.html): for graphical output
- [NetworkX](https://networkx.org/): for graph calculations and representation
- [Numpy](https://numpy.org/): for matrix calculations
- [Pandas](https://pandas.pydata.org/): for dataframe operations
- [SQLAlchemy](https://www.sqlalchemy.org/): for interaction with SQLite3
- [Rich](https://rich.readthedocs.io/en/stable/introduction.html): provides progress bars for user interaction

## Development
We rely on a number of additional packages to aid pyani development, and if you set up a development environment as recommended in Contributing to `pyANI-plus`, then the following Python packages will be installed or expected to be present:

- [coverage](https://pypi.org/project/coverage/): to generate code coverage output for the codecov.io service
- [pre-commit](https://pre-commit.com/): Manages and runs pre-commit hooks to enforce code quality and formatting before commits
- [pytest](https://pytest.org/en/latest/): to manage and run automated testing
- [pytest-cov](https://pypi.org/project/pytest-cov/): to integrate `pytest` with `codecov` and `coverage`
- [pytest-xdist](https://pypi.org/project/pytest-xdist/): Enables parallel test execution with `pytest`, improving test runtime efficiency.
- [Ruff](https://docs.astral.sh/ruff/): Python linter that enforces coding style and helps catch potential issues.
- [types-tqdm](https://pypi.org/project/types-tqdm/): Provides type hints for tqdm, improving type checking and IDE support.
